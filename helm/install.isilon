#/bin/bash

# Get the kubernetes major and minor version numbers.
kMajorVersion=$(kubectl version | grep 'Server Version' | sed -e 's/^.*Major:"//' -e 's/",.*//')
kMinorVersion=$(kubectl version | grep 'Server Version' | sed -e 's/^.*Minor:"//' -e 's/\+\?",.*//')

# Verify the kubernetes installation has the feature gates needed.
sh ./verify.kubernetes
rc=$?
if [ $rc -ne 0 ] ; 
	then echo "******************************************************************************************************"
             echo "Warning: Kubernetes --feature-gates not correctly configured or mount not installed... it may not work"
	     echo "******************************************************************************************************"
             sleep 5
fi
# Make sure the isilon-cred has already been established
kubectl get secrets -n isilon | grep isilon-cred --quiet
if [ $? -ne 0 ];
    then echo "*** YOU MUST PROVIDE Isilon credentials in a Kubernetes secret- see secret.yaml template ***"
    exit 2
fi

# Check if isilon-certs exists. If not, then create it
kubectl get secrets -n isilon | grep isilon-certs --quiet
if [ $? -ne 0 ];
    then echo "*** Couldn't find isilon-certs. Creating an empty secret. Delete it and re-create it if you want to validate OneFS API server's certificates ***"
    kubectl create -f ./emptysecret.yaml
fi

helm version | grep "v3." --quiet
if [ $? -eq 0 ]
then
    echo "Installing using helm version 3"
    helm install isilon --values myvalues.yaml --values csi-isilon/k8s-${kMajorVersion}.${kMinorVersion}-values.yaml --namespace isilon ./csi-isilon
else
    echo "Installing using helm version 2"
    helm install --values myvalues.yaml --values csi-isilon/k8s-${kMajorVersion}.${kMinorVersion}-values.yaml --name isilon --namespace isilon ./csi-isilon
fi

sleep 10
kubectl get pods --namespace isilon
sleep 5
kubectl get pods --namespace isilon
sleep 5
kubectl get pods --namespace isilon
echo "CSIDrivers:"
kubectl get csidrivers
echo "CSINodes:"
kubectl get csinodes
echo "StorageClasses:"
kubectl get storageclass

waitOnVolumeSnapshotClass(){

kubectl get customresourcedefinitions | grep volumesnapshotclasses --quiet

RC=$?

if [ $RC -ne 0 ];
then 
    echo "waiting for crd VolumeSnapshotClass to be created"  

    start=$(date +%s)
    
    while [ $RC -ne 0 ]
    do
	    kubectl get customresourcedefinitions 2>&1 | grep volumesnapshotclasses --quiet
        RC=$?
	    end=$(date +%s)
	    seconds=$(( $end - $start ))
	    if [ $seconds -ge 300 ]; then
    		echo "crd VolumeSnapshotClass unavaialble after waiting for 5 minutes"
		break
  	    fi
    done    
    echo "waiting is done, crd VolumeSnapshotClass has been created"
else 
    echo "crd VolumeSnapshotClass was already created"
fi
}

kubectl get volumesnapshotclass 2>&1 | grep isilon-snapclass --quiet
if [ $? -ne 0 ];
    then waitOnVolumeSnapshotClass; echo "installing volumesnapshotclass instance isilon-snapclass"; kubectl create -f volumesnapshotclass.yaml
fi
echo "VolumeSnapshotClasses:"
kubectl get volumesnapshotclass
